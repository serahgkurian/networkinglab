#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define PORT 8091
#define BUFFER_SIZE 1024

int main() {
    int server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_size = sizeof(struct sockaddr_in);
    char buffer[BUFFER_SIZE];

    // Create socket
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Bind the socket
    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        perror("Error binding socket");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    listen(server_socket, 5);
    printf("Server listening on port %d...\n", PORT);

    // Accept a connection from a client
    client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &addr_size);
    if (client_socket == -1) {
        perror("Error accepting connection");
        exit(EXIT_FAILURE);
    }

    // Receive HELO
    memset(buffer, 0, BUFFER_SIZE);
    recv(client_socket, buffer, BUFFER_SIZE, 0);
    if (strcmp(buffer, "HELO") == 0) {
        strcpy(buffer, "250"); 
        send(client_socket, buffer, strlen(buffer), 0);
        printf("S: %s\n", buffer);
    } else {
        strcpy(buffer, "500 Syntax error");
        send(client_socket, buffer, strlen(buffer), 0);
        printf("S: %s\n", buffer);
        close(client_socket);
        return 0;
    }

    // Receive sender email
    memset(buffer, 0, BUFFER_SIZE);
    recv(client_socket, buffer, BUFFER_SIZE, 0);
    printf("C: %s\n", buffer);
    strcpy(buffer, "250 OK");
    send(client_socket, buffer, strlen(buffer), 0);
    printf("S: %s\n", buffer);

    // Receive recipient email
    memset(buffer, 0, BUFFER_SIZE);
    recv(client_socket, buffer, BUFFER_SIZE, 0);
    strcpy(buffer, "250 Accepted");
    send(client_socket, buffer, strlen(buffer), 0);

    // Receive DATA command
    memset(buffer, 0, BUFFER_SIZE);
    recv(client_socket, buffer, BUFFER_SIZE, 0);
    if (strcmp(buffer, "DATA") == 0) {
        strcpy(buffer, "354 End data with .");
        send(client_socket, buffer, strlen(buffer), 0);
        printf("S: %s\n", buffer);
    }

    // Receive email content
    while (1) {
        memset(buffer, 0, BUFFER_SIZE);
        recv(client_socket, buffer, BUFFER_SIZE, 0);
        printf("C: %s\n", buffer);

        if (strcmp(buffer, ".\n") == 0) {
            strcpy(buffer, "250 Message accepted");
            send(client_socket, buffer, strlen(buffer), 0);
            printf("S: %s\n", buffer);
            break;
        }
    }

    // Receive QUIT command
    memset(buffer, 0, BUFFER_SIZE);
    recv(client_socket, buffer, BUFFER_SIZE, 0);
    printf("C: %s\n", buffer);
    if (strcmp(buffer, "QUIT") == 0) {
        strcpy(buffer, "221 Bye");
        send(client_socket, buffer, strlen(buffer), 0);
        printf("S: %s\n", buffer);
    }

    close(client_socket);
    close(server_socket);
    return 0;
}
